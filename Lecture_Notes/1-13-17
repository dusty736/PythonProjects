Functions
-scope, local variables
-abstraction
Lists

Scope
x = 22
stored = 100
  x = 42
  return stored + x
val = lookup()
x = 5
stored = 200
vale = lookup()

Local: x = 42
-Overwrites global variables
-Inside a function
Global: x = 22
-Assigned outside of a function/Loop

myvar = 1 #Global

def outer():
  myvar = 1000 #Local
  temp = inner()
  return temp

def inner():
  return myvar #Uses the global because inner doesn't contain myvar

print outer()

Abstraction = ignore some details
Generalization = become usable in more contexts
Abstraction over computations:
  -functional abstraction, a.ka.a. procedural abstraction
As long as you know what the function means, you don't care how it computes

Two types of documentation
-Documentation for users/clients/callers: Uses a function, doesn't change it.

-Programmers are reading the code and tells how the function does it


Lists!

Many different types.  Can hold number, other lists, strings, etc.
x = [1,2,3]
y = x[0] = 1
>>> d = [[1,2], [3,4], [5,6]]
>>> d[0]
[1, 2]

>>> d[:]
[[1, 2], [3, 4], [5, 6]]
>>> d[1:]
[[3, 4], [5, 6]]
>>> d[2:]
[[5, 6]]

>>> d.remove([1, 2])
d = [[3, 4], [5, 6]]

>>> a = [1, 2, 3, 4, 5]
>>> a[1:3] = [6,7,8]
>>> a
[1, 6, 7, 8, 4, 5]

>>> a.reverse()
>>> a
[5, 4, 8, 7, 6, 1]
